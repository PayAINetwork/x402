name: Nightly publish @payai TypeScript packages

on:
  schedule:
    - cron: "0 6 * * *" # 06:00 UTC daily
  workflow_dispatch: {}

jobs:
  publish-nightly:
    # Only run from fork under PayAINetwork to avoid publishing from upstream accidentally
    if: github.repository_owner == 'PayAINetwork'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    env:
      NODE_AUTH_TOKEN: ${{ secrets.PAYAI_NPM_TOKEN }}
      NPM_CONFIG_REGISTRY: https://registry.npmjs.org
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda
        with:
          version: 10.7.0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"
          cache: "pnpm"
          cache-dependency-path: ./typescript

      - name: Install and build all TypeScript packages
        working-directory: ./typescript
        run: |
          pnpm install --frozen-lockfile
          pnpm -r --filter=x402 --filter=x402-axios --filter=x402-fetch --filter=x402-express --filter=x402-hono --filter=x402-next run build

      - name: Ensure jq is available
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y jq
          fi

      - name: Prepare @payai package.json rewrites (name + nightly version)
        run: |
          set -euo pipefail
          TS_ROOT=./typescript/packages
          DATE_TAG=$(date -u +%Y%m%d)
          GIT_SHA=$(git rev-parse --short HEAD)
          NIGHTLY_SUFFIX=nightly.$DATE_TAG.$GIT_SHA

          rewrite_pkg_with_jq() {
            PKG_DIR=$1
            BASE_NAME=$(node -p "require('$PKG_DIR/package.json').name")
            VERSION=$(node -p "require('$PKG_DIR/package.json').version")
            NEW_NAME=@payai/$BASE_NAME
            NEW_VERSION=${VERSION%-*}-${NIGHTLY_SUFFIX}

            # Prepare temp file for atomic write
            TMP_FILE=$(mktemp)
            jq \
              --arg newName "$NEW_NAME" \
              --arg newVersion "$NEW_VERSION" \
              --arg x402Ver "^$CORE_X402_VERSION" \
              '
              .name = $newName | .version = $newVersion |
              (if .dependencies and .dependencies.x402 then .dependencies["@payai/x402"] = $x402Ver | del(.dependencies.x402) else . end) |
              (if .devDependencies and .devDependencies.x402 then .devDependencies["@payai/x402"] = $x402Ver | del(.devDependencies.x402) else . end) |
              (if .peerDependencies and .peerDependencies.x402 then .peerDependencies["@payai/x402"] = $x402Ver | del(.peerDependencies.x402) else . end) |
              (if .optionalDependencies and .optionalDependencies.x402 then .optionalDependencies["@payai/x402"] = $x402Ver | del(.optionalDependencies.x402) else . end)
              ' "$PKG_DIR/package.json" > "$TMP_FILE"
            mv "$TMP_FILE" "$PKG_DIR/package.json"

            # Output new version for chaining if needed
            echo "$NEW_VERSION"
          }

          # First rewrite core x402 so others can depend on the version
          CORE_BASE_NAME=$(node -p "require('$TS_ROOT/x402/package.json').name")
          CORE_VERSION=$(node -p "require('$TS_ROOT/x402/package.json').version")
          CORE_NEW_VERSION=${CORE_VERSION%-*}-${NIGHTLY_SUFFIX}
          CORE_NEW_NAME=@payai/$CORE_BASE_NAME
          TMP_FILE=$(mktemp)
          jq --arg newName "$CORE_NEW_NAME" --arg newVersion "$CORE_NEW_VERSION" '.name = $newName | .version = $newVersion' "$TS_ROOT/x402/package.json" > "$TMP_FILE"
          mv "$TMP_FILE" "$TS_ROOT/x402/package.json"
          CORE_X402_VERSION=$CORE_NEW_VERSION

          # Rewrite adapters referencing x402
          for pkg in x402-axios x402-fetch x402-express x402-hono x402-next; do
            rewrite_pkg_with_jq "$TS_ROOT/$pkg" > /dev/null
          done

          echo "Prepared @payai scoped packages with nightly version: $CORE_X402_VERSION"

      - name: Rewrite adapter dist imports to @payai/x402
        run: |
          set -euo pipefail
          for pkg in x402-axios x402-fetch x402-express x402-hono x402-next; do
            PKG_DIR=./typescript/packages/$pkg
            # Replace import specifiers in built outputs
            if [ -d "$PKG_DIR/dist" ]; then
              find "$PKG_DIR/dist" -type f \( -name "*.js" -o -name "*.mjs" -o -name "*.cjs" -o -name "*.d.ts" -o -name "*.d.mts" -o -name "*.d.cts" \) -print0 | xargs -0 sed -i 's/\"x402\"/\"@payai\/x402\"/g'
              find "$PKG_DIR/dist" -type f \( -name "*.js" -o -name "*.mjs" -o -name "*.cjs" -o -name "*.d.ts" -o -name "*.d.mts" -o -name "*.d.cts" \) -print0 | xargs -0 sed -i "s/'x402'/'@payai\/x402'/g"
            fi
          done

      - name: Publish @payai/x402 (core)
        working-directory: ./typescript/packages/x402
        run: |
          echo "Publishing $(node -p "require('./package.json').name")@$(node -p "require('./package.json').version")"
          pnpm publish --provenance --access public --no-git-checks

      - name: Publish @payai adapters
        run: |
          set -euo pipefail
          for pkg in x402-axios x402-fetch x402-express x402-hono x402-next; do
            pushd ./typescript/packages/$pkg > /dev/null
            echo "Publishing $(node -p "require('./package.json').name")@$(node -p "require('./package.json').version")"
            pnpm publish --provenance --access public --no-git-checks
            popd > /dev/null
          done

      - name: Summary
        run: |
          echo "Published nightly @payai packages"
